# -*- mode: ruby -*-
# vi: set ft=ruby :

# Simple ServerSHARK setup.
#
# This can be used to test new plugins.
# 
# copy Vagrantfile_template to Vagrantfile
# copy the server/settings_template_vagrant.py file to server/settings_vagrant.py
# change the database config if the below config is changed, change the SECRET_KEY in any case
# 
# After vagrant up, login via vagrant ssh from two windows:
#
# This starts the peon Worker which executes jobs from the redis queue
# sudo -i
# cd /srv/www/serverSHARK/
# source bin/activate
# python manage.py peon
#
# This starts the debug webserver for running the backend
# sudo -i
# cd /srv/www/serverSHARK/
# source bin/activate
# python manage.py runserver 0.0.0.0:8000
#
# You should then be able to login via http://127.0.0.1:8001/admin
# Username is admin, password is your adminpass chosen below.

# BEGIN CONFIG
# also set the mysqlpass, mongopass in the server/settings_vagrant.py file!
mysqlpass = "CHANGEME"
mongopass = "CHANGEME"
adminpass = "CHANGEME"
# END CONFIG

Vagrant.configure("2") do |config|

  config.vm.box = "ubuntu/bionic64"

  # this sets the vagrant name
  config.vm.define :ServerSHARK do |t|
  end
  
  config.vm.box_check_update = true

  config.vm.network "forwarded_port", guest: 8000, host: 8001, host_ip: "127.0.0.1"
  config.vm.network "forwarded_port", guest: 27017, host: 27018, host_ip: "127.0.0.1"

  config.vm.provider "virtualbox" do |vb|
    vb.memory = "2048"
    vb.name = "ServerSHARK"
  end

  # create pem for mongodb, deactivated for now
#  config.vm.provision "shell", inline: <<-SHELL
#    cd /etc/ssl/
#    openssl req -newkey rsa:2048 -new -x509 -days 365 -nodes -out mongodb-cert.crt -keyout mongodb-cert.key -batch -subj "/C=DE/ST=Goettingen/L=Niedersachsen/O=GA/OU=SWE/CN=localhost"
#    cat mongodb-cert.key mongodb-cert.crt > mongodb.pem
#  SHELL

  config.vm.provision "shell", inline: <<-SHELL

    # install java8 dependency repo for mecoSHARK
    add-apt-repository ppa:webupd8team/java

    apt-get update
    apt-get install -y git python3-venv python-pip python3-cffi libgit2-26 libgit2-dev libmysqlclient-dev libssl-dev python3-setuptools rpm
    apt-get install -y build-essential libtool pkg-config autoconf python3-dev libffi-dev cmake
    apt-get install -y redis-server

    # install java8 dependency for mecoSHARK, accept license
    debconf-set-selections <<< 'oracle-java8-installer shared/accepted-oracle-license-v1-1 select true'
    debconf-set-selections <<< 'oracle-java8-installer shared/accepted-oracle-license-v1-1 seen true'
    apt-get install -y oracle-java8-installer

    debconf-set-selections <<< 'mysql-server mysql-server/root_password password #{mysqlpass}'
    debconf-set-selections <<< 'mysql-server mysql-server/root_password_again password #{mysqlpass}'

    apt-get install -y mongodb mysql-server

    service mysql start
    mysql -u root --password=#{mysqlpass} -e "CREATE DATABASE IF NOT EXISTS servershark CHARACTER SET utf8 COLLATE utf8_general_ci;"
    
    # no tls for now
    # sed -i 's/\#sslOnNormalPorts = true/sslOnNormalPorts = true/g' /etc/mongodb.conf
    # sed -i 's/\#sslPEMKeyFile = \/etc\/ssl\/mongodb.pem/sslPEMKeyFile = \/etc\/ssl\/mongodb.pem/g' /etc/mongodb.conf
    # access used by visualSHARK
    sed -i 's/bind_ip = 127\.0\.0\.1/bind_ip = 0\.0\.0\.0/g' /etc/mongodb.conf

    service mongodb start
    #mongo admin --eval "db.getSiblingDB('smartshark').addUser('root', '#{mongopass}')"
    mongo admin --eval "db.getSiblingDB('smartshark').createUser({user:'root', pwd:'#{mongopass}',roles:[{role:'dbOwner', db:'smartshark'}]})"

    ln -s /usr/bin/python3.6 /usr/bin/python3.5
    pip install --upgrade pip
	
    rm -rf /srv/www/serverSHARK/
    mkdir -p /srv/www/
    cd /srv/www
    git clone https://github.com/smartshark/serverSHARK.git
    cd serverSHARK
    python3 -m venv .
    source bin/activate
    pip install -r requirements.txt
  SHELL
  
  config.vm.provision "file", source: "./server/settings_vagrant.py", destination: "~/settings.py"

  config.vm.provision "shell", inline: <<-SHELL
    cp /home/vagrant/settings.py /srv/www/serverSHARK/server/
    cd /srv/www/serverSHARK/
    source bin/activate
    
    pip install redis

    python manage.py migrate
    echo "from django.contrib.auth.models import User; User.objects.create_superuser('admin', 'admin@example.com', '#{adminpass}')" | python manage.py shell

    # should be done manually not in provision step
    # python manage.py runserver 0.0.0.0:8000
  SHELL
end